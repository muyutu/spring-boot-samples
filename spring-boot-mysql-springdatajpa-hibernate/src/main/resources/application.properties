# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://172.20.176.33:3306/sbmh

# Username and password
spring.datasource.username = root
spring.datasource.password = kingdee@2016

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true

#The SQL query that will be used to validate connections from this pool before returning them to the caller.
spring.datasource.validation-query=SELECT 1

spring.datasource.max-idle=10

# Number of ms to wait before throwing an exception if no connection is available.
spring.datasource.max-wait=10000

# Maximum number of active connections that can be allocated from this pool at the same time.
spring.datasource.max-active=50

#The minimum number of established connections that should be kept in the pool at all times.
spring.datasource.min-idle=5

#The initial number of connections that are created when the pool is started.
spring.datasource.initial-size=5

The indication of whether objects will be validated before being borrowed from the pool.
spring.datasource.test-on-borrow=false

# The indication of whether objects will be validated by the idle object evictor (if any).
spring.datasource.test-while-idle=true

#The number of milliseconds to sleep between runs of the idle connection validation/cleaner thread.
spring.datasource.time-between-eviction-runs-millis=18800

#A semicolon separated list of classnames extending org.apache.tomcat.jdbc.pool.JdbcInterceptor class.
spring.datasource.jdbc-interceptors=ConnectionState;SlowQueryReport(threshold=50)

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
